{"version":3,"file":"static/js/583.f289014c.chunk.js","mappings":"yOAyDA,UArDa,WAET,OAA8BA,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAyBJ,EAAAA,EAAAA,UAAS,IAAlC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAkCN,EAAAA,EAAAA,UAAS,IAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAqCR,OAnCAE,EAAAA,EAAAA,YAAU,WACV,IAAMC,EAAS,mCAAG,sGAENV,GAAW,GAFL,UAGiBW,EAAAA,EAAAA,IAAQJ,GAHzB,OAGAK,EAHA,OAIAC,EAASD,EAASE,KACxBC,QAAQC,IAAIH,GACZT,GAAQ,OAAIS,IANN,kDAQNX,EAAS,EAAD,IARF,yBAWNF,GAAW,GAXL,6EAAH,qDAeXU,GACH,GAAE,CAACH,KAEJE,EAAAA,EAAAA,YAAU,WACV,GAAqB,IAAjBN,EAAMc,OAAV,CACA,IAAMC,EAAWf,EAAMgB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OAA2C,0BACjEF,GAAe,gBAAKG,IAAG,4DAAuDH,GAAgBI,IAAI,MAAQ,kCAC3G,uBAAIH,KACJ,uCAAeC,OAH4DH,EAApD,IAKvBd,EAAaY,EAGhB,CACA,GAAE,CAACf,IAEJY,QAAQC,IAAIb,IAIR,4BACI,wBAAKE,IACJN,IAAW,+CACXE,IAAS,wDAGrB,C,4MCpDYyB,EAAiB,mCAAG,sGACRC,IAAAA,IAAA,0FADQ,uBACtBC,EADsB,EACtBA,KADsB,kBAGtBA,GAHsB,2CAAH,qDAMjBC,EAAe,mCAAG,WAAMP,GAAN,yFACNK,IAAAA,IAAA,kHAAqHL,EAArH,gCADM,uBACpBM,EADoB,EACpBA,KADoB,kBAGpBA,GAHoB,2CAAH,sDAMfE,EAAY,mCAAG,WAAMV,GAAN,yFACHO,IAAAA,IAAA,6CAAgDP,EAAhD,6DADG,uBACjBQ,EADiB,EACjBA,KADiB,kBAGjBA,GAHiB,2CAAH,sDAOZjB,EAAO,mCAAG,WAAMS,GAAN,yFACEO,IAAAA,IAAA,6CAAgDP,EAAhD,qEADF,uBACZQ,EADY,EACZA,KADY,kBAGZA,GAHY,2CAAH,sDAMPG,EAAU,mCAAG,WAAOX,GAAP,yFACCO,IAAAA,IAAA,6CAAgDP,EAAhD,4EADD,uBACdQ,EADc,EACdA,KADc,kBAGfA,GAHe,2CAAH,qD,iFCxBR,SAASI,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,EAAAG,EAAA,GAAiBH,EAClD,CDES,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAMM,KAAKH,EACtH,CFGmC,CAAgBJ,KAAQ,EAAAQ,EAAA,GAA2BR,IGLvE,WACb,MAAM,IAAIS,UAAU,uIACtB,CHG8F,EAC9F,C","sources":["pages/CastPage/CastPage.jsx","shared/api/movies.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import {useState, useEffect} from \"react\";\nimport { getCast } from '../../shared/api/movies';\nimport {useParams } from 'react-router-dom';\n\nconst Cast = () => {\n\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [items, setItem] = useState([]);\n    const [castItems, setcastItems] = useState([]);\n\n    const { movieId } = useParams();\n\n    useEffect(() => { \n    const fetchCast = async () => {\n            try {\n                setLoading(true)                \n                const response = await getCast(movieId);\n                const result = response.cast;\n                console.log(result);\n                setItem([...result])\n            } catch (error) {\n                setError(error)\n            }\n            finally {\n                setLoading(false)\n            }\n    };\n    \n        fetchCast()\n    }, [movieId]);\n\n    useEffect(() => { \n    if (items.length !== 0){\n    const elements = items.map(({ id, profile_path, name, character }) => <li key={id}>        \n        {profile_path ? <img src={`https://www.themoviedb.org/t/p/w138_and_h175_face/${profile_path}`} alt=\"\" /> : <div>???</div>}\n        <p>{name}</p>\n        <p>Character: {character}</p>\n    </li>)\n        setcastItems(elements)\n    } else {\n        return\n    }\n    }, [items]); \n    \n    console.log(items)\n\n\n    return (\n        <div>\n            <ul>{castItems}</ul>            \n            {loading && <p>...load information</p>}\n            {error && <p>...Information load failed</p>}\n        </div>\n    )\n}\n\nexport default Cast;","import axios from \"axios\";\n\n\nexport const getTrendingMovies = async() => {\n    const {data} = await axios.get(`https://api.themoviedb.org/3/trending/all/day?api_key=d320fda9f0a654278233a1e86d74d04d`);\n\n    return data;\n}\n\nexport const getMoviesByName = async(name) => {\n    const {data} = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=d320fda9f0a654278233a1e86d74d04d&language=en-US&query=${name}&page=1&include_adult=false`);\n\n    return data;\n}\n\nexport const getMovieById = async(id) => {\n    const {data} = await axios.get(`https://api.themoviedb.org/3/movie/${id}?api_key=d320fda9f0a654278233a1e86d74d04d&language=en-US`);\n\n    return data;\n}\n\n\nexport const getCast = async(id) => {\n    const {data} = await axios.get(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=d320fda9f0a654278233a1e86d74d04d&language=en-US`);\n\n    return data;\n}\n\nexport const getReviews = async (id) => {\n    const { data } = await axios.get(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=d320fda9f0a654278233a1e86d74d04d&language=en-US&page=1`);\n\n    return data;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["useState","loading","setLoading","error","setError","items","setItem","castItems","setcastItems","movieId","useParams","useEffect","fetchCast","getCast","response","result","cast","console","log","length","elements","map","id","profile_path","name","character","src","alt","getTrendingMovies","axios","data","getMoviesByName","getMovieById","getReviews","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}